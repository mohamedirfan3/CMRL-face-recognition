from sklearn.neighbors import KNeighborsClassifier
import cv2
import pickle
import numpy as np
import os
import csv
import time
from datetime import datetime
from win32com.client import Dispatch

def speak(text):
    speak = Dispatch(("SAPI.SpVoice"))
    speak.Speak(text)


video=cv2.VideoCapture(0)
facedetect=cv2.CascadeClassifier('haarcascade_frontalface_default .xml')

# Load trained model and labels
with open('data/names.pkl', 'rb') as file:
    LABELS = pickle.load(file)
with open('data/faces_data.pkl', 'rb') as file:
    FACES = pickle.load(file)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(FACES, LABELS)

# Dictionary to keep track of the in-time for each person
attendance_log = {}

while True:
    ret, frame = video.read()
    if not ret:
        print("Failed to grab frame")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = facedetect.detectMultiScale(gray, 1.3, 5)
    
    if len(faces) > 0:
        for (x, y, w, h) in faces:
            crop_img = frame[y:y+h, x:x+w]
            resized_img = cv2.resize(crop_img, (50, 25)).flatten().reshape(1, -1)
            output = knn.predict(resized_img)
            name = output[0]
            ts = time.time()
            date = datetime.fromtimestamp(ts).strftime("%d-%m-%Y")
            timestamp = datetime.fromtimestamp(ts).strftime("%H:%M:%S")
            file_path = f"Attendance_{date}.csv"
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 255), 1)
            cv2.rectangle(frame, (x, y), (x+w, y+h), (50, 50, 255), 2)
            cv2.rectangle(frame, (x, y-40), (x+w, y), (50, 50, 255), -1)
            cv2.putText(frame, str(name), (x, y-15), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 1)

            if os.path.isfile(file_path):
                # Update existing records
                with open(file_path, "r", newline='') as csvfile:
                    reader = csv.DictReader(csvfile)
                    rows = list(reader)
                
                updated = False
                with open(file_path, "w", newline='') as csvfile:
                    fieldnames = ['NAME', 'DATE', 'IN-TIME', 'OUT-TIME']
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    
                    for row in rows:
                        if row['NAME'] == name and row['DATE'] == date:
                            if row['IN-TIME'] and not row['OUT-TIME']:
                                # Update OUT-TIME if IN-TIME exists
                                row['OUT-TIME'] = timestamp
                                updated = True
                            elif not row['IN-TIME']:
                                # Update IN-TIME if no IN-TIME exists
                                row['IN-TIME'] = timestamp
                                updated = True
                        writer.writerow(row)
                    
                    # If no update was made, add a new record
                    if not updated:
                        writer.writerow({'NAME': name, 'DATE': date, 'IN-TIME': timestamp, 'OUT-TIME': ''})
            else:
                # Create new file and add the record if it doesn't exist
                with open(file_path, "w", newline='') as csvfile:
                    fieldnames = ['NAME', 'DATE', 'IN-TIME', 'OUT-TIME']
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerow({'NAME': name, 'DATE': date, 'IN-TIME': timestamp, 'OUT-TIME': ''})

            # Provide feedback if no IN-TIME was recorded
            if not any(row['NAME'] == name and row['DATE'] == date and row['IN-TIME'] for row in rows):
                speak("No IN-TIME recorded for " + name)

            # Exit after logging attendance for the first detected face
            break
        
        # Exit the loop after recording
        break

    # Exit the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
video.release()
cv2.destroyAllWindows()
print(f"Signing out {name} at {timestamp} on {date}")
